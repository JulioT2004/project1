// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  dni               String    @db.Char(8) @unique
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  phone             String
  jobTitle          String
  isSuperuser       Boolean   @default(false)
  startDate         DateTime  @default(now())
  isVerified        Boolean   @default(false)
  vacationDayAvailable Int @default(0)

  vacations         Vacation[]  @relation("UserVacations")
  laptop            Laptop?
  verificationCodes VerificationCode[]
  refreshTokens     RefreshToken[]

  @@map("users")
}

model Laptop {
  id        Int     @id
  model     String
  userId    Int?     @unique

  user      User?    @relation(fields: [userId], references: [id])

  @@map("laptops")
}

enum VacationStatus {
  PENDING
  APPROVED
  DENIED
}


model Vacation {
  id         Int      @id @default(autoincrement())
  userId     Int
  startDate  DateTime
  endDate    DateTime
  status      VacationStatus @default(PENDING)

  user       User     @relation("UserVacations", fields: [userId], references: [id])

  @@map("vacations")
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])

  @@map("verification_codes")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime

  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

